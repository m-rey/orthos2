# Generated by Django 2.2.11 on 2020-04-14 16:34

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import data.models.domain
import data.models.machine
import data.models.networkinterface


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Architecture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('dhcp_filename', models.CharField(blank=True, max_length=64, null=True, verbose_name='DHCP filename')),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('dhcpv4_write', models.BooleanField(default=True, verbose_name='Write DHCPv4')),
                ('dhcpv6_write', models.BooleanField(default=True, verbose_name='Write DHCPv6')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, validators=[data.models.domain.validate_domain_ending])),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
        ),
        migrations.CreateModel(
            name='Enclosure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fqdn', models.CharField(db_index=True, max_length=200, unique=True, validators=[data.models.machine.validate_dns, data.models.domain.validate_domain_ending], verbose_name='FQDN')),
                ('comment', models.CharField(blank=True, max_length=512)),
                ('serial_number', models.CharField(blank=True, max_length=200)),
                ('product_code', models.CharField(blank=True, max_length=200)),
                ('cpu_model', models.CharField(blank=True, max_length=200, verbose_name='CPU model')),
                ('cpu_flags', models.TextField(blank=True, verbose_name='CPU flags')),
                ('cpu_physical', models.IntegerField(default=1, verbose_name='CPU sockets')),
                ('cpu_cores', models.IntegerField(default=1, verbose_name='CPU cores')),
                ('cpu_threads', models.IntegerField(default=1, verbose_name='CPU threads')),
                ('cpu_speed', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='CPU speed (MHz)')),
                ('cpu_id', models.CharField(blank=True, max_length=200, verbose_name='CPU ID')),
                ('ram_amount', models.IntegerField(default=0, verbose_name='RAM amount (MB)')),
                ('efi', models.BooleanField(default=False, verbose_name='EFI boot')),
                ('nda', models.BooleanField(default=False, verbose_name='NDA hardware')),
                ('ipmi', models.BooleanField(default=False, verbose_name='IPMI capability')),
                ('vm_capable', models.BooleanField(default=False, verbose_name='VM capable')),
                ('vm_max', models.IntegerField(default=5, verbose_name='Max. VMs')),
                ('vm_dedicated_host', models.BooleanField(default=False, verbose_name='Dedicated VM host')),
                ('vm_auto_delete', models.BooleanField(default=False, verbose_name='Delete automatically')),
                ('virtualization_api', models.SmallIntegerField(blank=True, choices=[(0, 'libvirt')], null=True, verbose_name='Virtualization API')),
                ('reserved_at', models.DateTimeField(blank=True, null=True)),
                ('reserved_until', models.DateTimeField(blank=True, null=True)),
                ('reserved_reason', models.CharField(blank=True, max_length=512, null=True, verbose_name='Reservation reason')),
                ('bios_version', models.CharField(blank=True, max_length=200)),
                ('disk_primary_size', models.SmallIntegerField(blank=True, null=True, verbose_name='Disk primary size (GB)')),
                ('disk_type', models.CharField(blank=True, max_length=100)),
                ('lsmod', models.TextField(blank=True)),
                ('last', models.CharField(blank=True, max_length=100)),
                ('hwinfo', models.TextField(blank=True)),
                ('dmidecode', models.TextField(blank=True)),
                ('dmesg', models.TextField(blank=True)),
                ('lsscsi', models.TextField(blank=True)),
                ('lsusb', models.TextField(blank=True)),
                ('lspci', models.TextField(blank=True)),
                ('status_ipv4', models.SmallIntegerField(choices=[(0, 'unreachable'), (1, 'reachable'), (2, 'confirmed'), (3, 'MAC mismatch'), (4, 'address mismatch'), (5, 'no address assigned'), (6, 'address-family disabled')], default=0, editable=False, verbose_name='Status IPv4')),
                ('status_ipv6', models.SmallIntegerField(choices=[(0, 'unreachable'), (1, 'reachable'), (2, 'confirmed'), (3, 'MAC mismatch'), (4, 'address mismatch'), (5, 'no address assigned'), (6, 'address-family disabled')], default=0, editable=False, verbose_name='Status IPv6')),
                ('status_ssh', models.BooleanField(default=False, editable=False, verbose_name='SSH')),
                ('status_login', models.BooleanField(default=False, editable=False, verbose_name='Login')),
                ('status_abuild', models.BooleanField(default=False, editable=False, verbose_name='ABuild')),
                ('administrative', models.BooleanField(default=False, verbose_name='Administrative machine')),
                ('check_connectivity', models.SmallIntegerField(choices=[(0, 'Disable'), (1, 'Ping only'), (2, 'SSH (includes Ping+SSH)'), (3, 'Full (includes Ping+SSH+Login)')], default=1)),
                ('check_abuild', models.BooleanField(default=False)),
                ('collect_system_information', models.BooleanField(default=False)),
                ('dhcp_filename', models.CharField(blank=True, max_length=64, null=True, verbose_name='DHCP filename')),
                ('dhcpv4_write', models.SmallIntegerField(choices=[(0, 'Write DHCP record'), (1, 'Ignore DHCP requests'), (2, 'Exclude DHCP record')], default=0, verbose_name='DHCPv4')),
                ('dhcpv6_write', models.SmallIntegerField(choices=[(0, 'Write DHCP record'), (2, 'Exclude DHCP record')], default=0, verbose_name='DHCPv6')),
                ('active', models.BooleanField(default=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('kernel_options', models.CharField(blank=True, max_length=4096)),
                ('last_check', models.DateTimeField(default='2016-01-01T10:00:00+00:00', editable=False, verbose_name='Checked at')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('architecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.Architecture')),
                ('enclosure', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='data.Enclosure')),
                ('fqdn_domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.Domain')),
            ],
            options={
                'ordering': ['fqdn'],
            },
        ),
        migrations.CreateModel(
            name='MachineGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('comment', models.CharField(blank=True, max_length=512)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('dhcp_filename', models.CharField(blank=True, max_length=64, null=True, verbose_name='DHCP filename')),
                ('dhcpv4_write', models.BooleanField(default=True, verbose_name='Write DHCPv4')),
                ('dhcpv6_write', models.BooleanField(default=True, verbose_name='Write DHCPv6')),
                ('setup_use_architecture', models.BooleanField(default=False, verbose_name='Use machines architecture for setup')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
            options={
                'verbose_name': 'Machine Group',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='SerialConsoleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('command', models.CharField(blank=True, max_length=512, null=True)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
            options={
                'verbose_name': 'Serial Console Type',
            },
        ),
        migrations.CreateModel(
            name='ServerConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.CharField(blank=True, max_length=512)),
                ('created', models.DateTimeField(auto_now=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'Server Configuration',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('virtual', models.BooleanField(default=False)),
                ('administrative', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now=True, verbose_name='created at')),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReservationHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reserved_by', models.CharField(max_length=200)),
                ('reserved_at', models.DateTimeField()),
                ('reserved_until', models.DateTimeField()),
                ('reserved_reason', models.CharField(max_length=512, verbose_name='Reservation reason')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('machine', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='data.Machine')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_cartridge', models.BooleanField(default=False, verbose_name='Cartridge/Blade')),
                ('description', models.CharField(blank=True, max_length=512)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.Vendor')),
            ],
            options={
                'ordering': ['vendor', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PCIDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slot', models.TextField(default=None, null=True)),
                ('vendor_id', models.TextField(default=None, null=True)),
                ('vendor', models.TextField(default=None, null=True)),
                ('device_id', models.TextField(default=None, null=True)),
                ('device', models.TextField(default=None, null=True)),
                ('class_id', models.TextField(default=None, null=True)),
                ('classname', models.TextField(default=None, null=True)),
                ('subvendor_id', models.TextField(default=None, null=True)),
                ('subvendor', models.TextField(default=None, null=True)),
                ('subdevice_id', models.TextField(default=None, null=True)),
                ('subdevice', models.TextField(default=None, null=True)),
                ('revision', models.TextField(default=None, null=True)),
                ('drivermodule', models.TextField(default=None, null=True)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.Machine')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NetworkInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False, verbose_name='Primary')),
                ('mac_address', models.CharField(max_length=20, unique=True, validators=[data.models.networkinterface.validate_mac_address], verbose_name='MAC address')),
                ('ethernet_type', models.CharField(blank=True, max_length=100)),
                ('driver_module', models.CharField(blank=True, max_length=100)),
                ('name', models.CharField(default='unknown', max_length=20)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('machine', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='networkinterfaces', to='data.Machine')),
            ],
            options={
                'verbose_name': 'Network Interface',
                'ordering': ('-primary',),
            },
        ),
        migrations.CreateModel(
            name='MachineGroupMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_privileged', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.MachineGroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='machinegroup',
            name='members',
            field=models.ManyToManyField(through='data.MachineGroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='machine',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.MachineGroup'),
        ),
        migrations.AddField(
            model_name='machine',
            name='platform',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_cartridge': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.Platform'),
        ),
        migrations.AddField(
            model_name='machine',
            name='reserved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='machine',
            name='system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.System'),
        ),
        migrations.CreateModel(
            name='Installation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=True)),
                ('architecture', models.CharField(blank=True, max_length=200)),
                ('distribution', models.CharField(blank=True, max_length=200)),
                ('kernelversion', models.CharField(blank=True, max_length=100, verbose_name='Kernel version')),
                ('partition', models.CharField(blank=True, max_length=100)),
                ('machine', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='data.Machine')),
            ],
        ),
        migrations.AddField(
            model_name='enclosure',
            name='platform',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_cartridge': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.Platform'),
        ),
        migrations.AddField(
            model_name='domain',
            name='dhcp_server',
            field=models.ManyToManyField(blank=True, limit_choices_to={'administrative': True}, related_name='dhcp_server_for', to='data.Machine', verbose_name='DHCP server'),
        ),
        migrations.AddField(
            model_name='domain',
            name='setup_architectures',
            field=models.ManyToManyField(blank=True, related_name='setup_domains', to='data.Architecture', verbose_name='Setup architectures'),
        ),
        migrations.AddField(
            model_name='domain',
            name='setup_machinegroups',
            field=models.ManyToManyField(blank=True, related_name='setup_domains', to='data.MachineGroup', verbose_name='Setup machine groups'),
        ),
        migrations.AddField(
            model_name='domain',
            name='tftp_server',
            field=models.ForeignKey(blank=True, limit_choices_to={'administrative': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tftp_server_for', to='data.Machine', verbose_name='TFTP server'),
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=1024)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('machine', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='data.Machine')),
                ('reporter', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='SerialConsole',
            fields=[
                ('machine', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='data.Machine')),
                ('device', models.CharField(blank=True, max_length=100, null=True)),
                ('port', models.SmallIntegerField(blank=True, null=True)),
                ('command', models.CharField(blank=True, max_length=200, null=True)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('baud_rate', models.IntegerField(choices=[(2400, '2400'), (4800, '4800'), (9600, '9600'), (19200, '19200'), (38400, '38400'), (57600, '57600'), (115200, '115200')], default=57600)),
                ('kernel_device', models.SmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1024)])),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('console_server', models.ForeignKey(blank=True, limit_choices_to={'administrative': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='console_server', to='data.Machine', verbose_name='Dedicated console server')),
                ('cscreen_server', models.ForeignKey(limit_choices_to={'administrative': True}, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='data.Machine', verbose_name='CScreen server')),
                ('management_bmc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='managed_serialconsole', to='data.Machine', verbose_name='Management BMC')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.SerialConsoleType')),
            ],
            options={
                'verbose_name': 'Serial Console',
            },
        ),
        migrations.CreateModel(
            name='RemotePower',
            fields=[
                ('machine', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='data.Machine')),
                ('type', models.SmallIntegerField(choices=[(0, 'Telnet'), (1, 'Sentry'), (2, 'ILO'), (3, 'IPMI'), (4, 'Dominion PX'), (5, 'libvirt/qemu'), (6, 'libvirt/lxc'), (7, 'WEBcurl'), (8, 's390')])),
                ('port', models.SmallIntegerField(blank=True, null=True)),
                ('device', models.SmallIntegerField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('management_bmc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='managed_remotepower', to='data.Machine', verbose_name='Management BMC')),
                ('remote_power_device', models.ForeignKey(blank=True, limit_choices_to={'system': 90}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='data.Machine')),
            ],
        ),
        migrations.CreateModel(
            name='DominionPX',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='ILO',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='IPMI',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='LibvirtLXC',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='LibvirtQEMU',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='S390',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='Sentry',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='Telnet',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
        migrations.CreateModel(
            name='WEBCurl',
            fields=[
            ],
            options={
                'verbose_name': 'Remote Power',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('data.remotepower',),
        ),
    ]
